# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.context_parameters import ContextParameters  # noqa: F401,E501
from swagger_server.models.player import Player  # noqa: F401,E501
from swagger_server import util


class Context(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, parameters: ContextParameters=None, player_list: List[Player]=None):  # noqa: E501
        """Context - a model defined in Swagger

        :param parameters: The parameters of this Context.  # noqa: E501
        :type parameters: ContextParameters
        :param player_list: The player_list of this Context.  # noqa: E501
        :type player_list: List[Player]
        """
        self.swagger_types = {
            'parameters': ContextParameters,
            'player_list': List[Player]
        }

        self.attribute_map = {
            'parameters': 'parameters',
            'player_list': 'player_list'
        }
        self._parameters = parameters
        self._player_list = player_list

    @classmethod
    def from_dict(cls, dikt) -> 'Context':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Context of this Context.  # noqa: E501
        :rtype: Context
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameters(self) -> ContextParameters:
        """Gets the parameters of this Context.


        :return: The parameters of this Context.
        :rtype: ContextParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: ContextParameters):
        """Sets the parameters of this Context.


        :param parameters: The parameters of this Context.
        :type parameters: ContextParameters
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters

    @property
    def player_list(self) -> List[Player]:
        """Gets the player_list of this Context.

        List of players  # noqa: E501

        :return: The player_list of this Context.
        :rtype: List[Player]
        """
        return self._player_list

    @player_list.setter
    def player_list(self, player_list: List[Player]):
        """Sets the player_list of this Context.

        List of players  # noqa: E501

        :param player_list: The player_list of this Context.
        :type player_list: List[Player]
        """
        if player_list is None:
            raise ValueError("Invalid value for `player_list`, must not be `None`")  # noqa: E501

        self._player_list = player_list
