# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ContextParameters(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, platform: str=None, sport: str=None, population_size: int=None, generation_count: int=None):  # noqa: E501
        """ContextParameters - a model defined in Swagger

        :param platform: The platform of this ContextParameters.  # noqa: E501
        :type platform: str
        :param sport: The sport of this ContextParameters.  # noqa: E501
        :type sport: str
        :param population_size: The population_size of this ContextParameters.  # noqa: E501
        :type population_size: int
        :param generation_count: The generation_count of this ContextParameters.  # noqa: E501
        :type generation_count: int
        """
        self.swagger_types = {
            'platform': str,
            'sport': str,
            'population_size': int,
            'generation_count': int
        }

        self.attribute_map = {
            'platform': 'platform',
            'sport': 'sport',
            'population_size': 'population_size',
            'generation_count': 'generation_count'
        }
        self._platform = platform
        self._sport = sport
        self._population_size = population_size
        self._generation_count = generation_count

    @classmethod
    def from_dict(cls, dikt) -> 'ContextParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Context_parameters of this ContextParameters.  # noqa: E501
        :rtype: ContextParameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def platform(self) -> str:
        """Gets the platform of this ContextParameters.

        Daily fantasy sports competition platform  # noqa: E501

        :return: The platform of this ContextParameters.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform: str):
        """Sets the platform of this ContextParameters.

        Daily fantasy sports competition platform  # noqa: E501

        :param platform: The platform of this ContextParameters.
        :type platform: str
        """
        if platform is None:
            raise ValueError("Invalid value for `platform`, must not be `None`")  # noqa: E501

        self._platform = platform

    @property
    def sport(self) -> str:
        """Gets the sport of this ContextParameters.

        Sport  # noqa: E501

        :return: The sport of this ContextParameters.
        :rtype: str
        """
        return self._sport

    @sport.setter
    def sport(self, sport: str):
        """Sets the sport of this ContextParameters.

        Sport  # noqa: E501

        :param sport: The sport of this ContextParameters.
        :type sport: str
        """
        if sport is None:
            raise ValueError("Invalid value for `sport`, must not be `None`")  # noqa: E501

        self._sport = sport

    @property
    def population_size(self) -> int:
        """Gets the population_size of this ContextParameters.

        Number of lineups to be generated (10-50)  # noqa: E501

        :return: The population_size of this ContextParameters.
        :rtype: int
        """
        return self._population_size

    @population_size.setter
    def population_size(self, population_size: int):
        """Sets the population_size of this ContextParameters.

        Number of lineups to be generated (10-50)  # noqa: E501

        :param population_size: The population_size of this ContextParameters.
        :type population_size: int
        """
        if population_size is None:
            raise ValueError("Invalid value for `population_size`, must not be `None`")  # noqa: E501

        self._population_size = population_size

    @property
    def generation_count(self) -> int:
        """Gets the generation_count of this ContextParameters.

        Number of times genetic algorithm will run (10-1000), more generations = more time  # noqa: E501

        :return: The generation_count of this ContextParameters.
        :rtype: int
        """
        return self._generation_count

    @generation_count.setter
    def generation_count(self, generation_count: int):
        """Sets the generation_count of this ContextParameters.

        Number of times genetic algorithm will run (10-1000), more generations = more time  # noqa: E501

        :param generation_count: The generation_count of this ContextParameters.
        :type generation_count: int
        """
        if generation_count is None:
            raise ValueError("Invalid value for `generation_count`, must not be `None`")  # noqa: E501

        self._generation_count = generation_count
