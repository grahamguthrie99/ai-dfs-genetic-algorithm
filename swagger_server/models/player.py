# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Player(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, _date: str=None, name: str=None, fn: str=None, ln: str=None, pos: str=None, inj: str=None, team: str=None, salary: int=None, ppg_proj: float=None, value_proj: float=None):  # noqa: E501
        """Player - a model defined in Swagger

        :param id: The id of this Player.  # noqa: E501
        :type id: int
        :param _date: The _date of this Player.  # noqa: E501
        :type _date: str
        :param name: The name of this Player.  # noqa: E501
        :type name: str
        :param fn: The fn of this Player.  # noqa: E501
        :type fn: str
        :param ln: The ln of this Player.  # noqa: E501
        :type ln: str
        :param pos: The pos of this Player.  # noqa: E501
        :type pos: str
        :param inj: The inj of this Player.  # noqa: E501
        :type inj: str
        :param team: The team of this Player.  # noqa: E501
        :type team: str
        :param salary: The salary of this Player.  # noqa: E501
        :type salary: int
        :param ppg_proj: The ppg_proj of this Player.  # noqa: E501
        :type ppg_proj: float
        :param value_proj: The value_proj of this Player.  # noqa: E501
        :type value_proj: float
        """
        self.swagger_types = {
            'id': int,
            '_date': str,
            'name': str,
            'fn': str,
            'ln': str,
            'pos': str,
            'inj': str,
            'team': str,
            'salary': int,
            'ppg_proj': float,
            'value_proj': float, 
            'fitness_score': float
        }

        self.attribute_map = {
            'id': 'id',
            '_date': 'date',
            'name': 'name',
            'fn': 'fn',
            'ln': 'ln',
            'pos': 'pos',
            'inj': 'inj',
            'team': 'team',
            'salary': 'salary',
            'ppg_proj': 'ppg_proj',
            'value_proj': 'value_proj', 
            'fitness_score': "fitness_score"
        }
        self._id = id
        self.__date = _date
        self._name = name
        self._fn = fn
        self._ln = ln
        self._pos = pos
        self._inj = inj
        self._team = team
        self._salary = salary
        self._ppg_proj = ppg_proj
        self._value_proj = value_proj
        self._fitness_score = 0

    @classmethod
    def from_dict(cls, dikt) -> 'Player':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Player of this Player.  # noqa: E501
        :rtype: Player
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Player.

        Player Id  # noqa: E501

        :return: The id of this Player.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Player.

        Player Id  # noqa: E501

        :param id: The id of this Player.
        :type id: int
        """

        self._id = id

    @property
    def _date(self) -> str:
        """Gets the _date of this Player.

        Date  # noqa: E501

        :return: The _date of this Player.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date: str):
        """Sets the _date of this Player.

        Date  # noqa: E501

        :param _date: The _date of this Player.
        :type _date: str
        """

        self.__date = _date

    @property
    def name(self) -> str:
        """Gets the name of this Player.

        Player Name  # noqa: E501

        :return: The name of this Player.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Player.

        Player Name  # noqa: E501

        :param name: The name of this Player.
        :type name: str
        """

        self._name = name

    @property
    def fn(self) -> str:
        """Gets the fn of this Player.

        Player First Name  # noqa: E501

        :return: The fn of this Player.
        :rtype: str
        """
        return self._fn

    @fn.setter
    def fn(self, fn: str):
        """Sets the fn of this Player.

        Player First Name  # noqa: E501

        :param fn: The fn of this Player.
        :type fn: str
        """

        self._fn = fn

    @property
    def ln(self) -> str:
        """Gets the ln of this Player.

        Player Last Name  # noqa: E501

        :return: The ln of this Player.
        :rtype: str
        """
        return self._ln

    @ln.setter
    def ln(self, ln: str):
        """Sets the ln of this Player.

        Player Last Name  # noqa: E501

        :param ln: The ln of this Player.
        :type ln: str
        """

        self._ln = ln

    @property
    def pos(self) -> str:
        """Gets the pos of this Player.

        Position  # noqa: E501

        :return: The pos of this Player.
        :rtype: str
        """
        return self._pos

    @pos.setter
    def pos(self, pos: str):
        """Sets the pos of this Player.

        Position  # noqa: E501

        :param pos: The pos of this Player.
        :type pos: str
        """

        self._pos = pos

    @property
    def inj(self) -> str:
        """Gets the inj of this Player.

        Injury Status  # noqa: E501

        :return: The inj of this Player.
        :rtype: str
        """
        return self._inj

    @inj.setter
    def inj(self, inj: str):
        """Sets the inj of this Player.

        Injury Status  # noqa: E501

        :param inj: The inj of this Player.
        :type inj: str
        """

        self._inj = inj

    @property
    def team(self) -> str:
        """Gets the team of this Player.

        Team  # noqa: E501

        :return: The team of this Player.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team: str):
        """Sets the team of this Player.

        Team  # noqa: E501

        :param team: The team of this Player.
        :type team: str
        """

        self._team = team

    @property
    def salary(self) -> int:
        """Gets the salary of this Player.

        Salary  # noqa: E501

        :return: The salary of this Player.
        :rtype: int
        """
        return self._salary

    @salary.setter
    def salary(self, salary: int):
        """Sets the salary of this Player.

        Salary  # noqa: E501

        :param salary: The salary of this Player.
        :type salary: int
        """

        self._salary = salary

    @property
    def ppg_proj(self) -> float:
        """Gets the ppg_proj of this Player.

        Projected fantasy points  # noqa: E501

        :return: The ppg_proj of this Player.
        :rtype: float
        """
        return self._ppg_proj

    @ppg_proj.setter
    def ppg_proj(self, ppg_proj: float):
        """Sets the ppg_proj of this Player.

        Projected fantasy points  # noqa: E501

        :param ppg_proj: The ppg_proj of this Player.
        :type ppg_proj: float
        """

        self._ppg_proj = ppg_proj

    @property
    def value_proj(self) -> float:
        """Gets the value_proj of this Player.

        Projected fantasy value  # noqa: E501

        :return: The value_proj of this Player.
        :rtype: float
        """
        return self._value_proj

    @value_proj.setter
    def value_proj(self, value_proj: float):
        """Sets the value_proj of this Player.

        Projected fantasy value  # noqa: E501

        :param value_proj: The value_proj of this Player.
        :type value_proj: float
        """

        self._value_proj = value_proj

    @property
    def fitness_score(self) -> float:
        return self._fitness_score

    @fitness_score.setter
    def fitness_score(self, fitness_score: float):
        self._fitness_score = fitness_score




